function u = dorpri8(uinit,hinit,tinit,tfinal,fun,adapt,atol,rtol)
% DORPRI8 integrates the system of differential equations u’(t) = f(t,u) using a 13-stage
% 8th-order explicit Runge-Kutta method with stepsize control.
% INPUT:
% uinit =initial solution (column vector)
% hinit =initial timestep (scalar)
% tinit =initial time (scalar)
% tfinal = final time (scalar)
% fun= function that returns fas acolumn vector given tand u (function handle)
% adapt =function that performs thespatial adaptivity (function handle)
% atol =absolute error tolerance (scalar)
% rtol =relative error tolerance (scalar)
% OUTPUT:
%u=final solution (column vector)
% REFERENCES:
% Coefficients are taken from aFORTRAN 77 subroutine called DOP853 written by Ernst
% Hairer and Gerhard Wanner [60]. Details ofthe method can befound in [58].
% Teik Wynn Tee, Sep 2006.
% DEFINE COEFFICIENT MATRICES AND VECTORS
A = zeros(12,12); b8 = zeros(12,1); b5 = zeros(12,1); b3 = zeros(12,1); c = zeros(12,1);
A(2,1) = 5.2600151958767731878559e-02; A(3,1) = 1.9725056984537899454460e-02;
A(3,2) = 5.9175170953613698363379e-02; A(4,1) = 2.9587585476806849181689e-02;
A(4,2) = 0.0000000000000000000000e-00; A(4,3) = 8.8762756430420547545068e-02;
A(5,1) = 2.4136513415926668550237e-01; A(5,2) = 0.0000000000000000000000e-00;
A(5,3) = -8.8454947932828608534486e-01; A(5,4) = 9.2483400326179200311574e-01;
A(6,1) = 3.7037037037037037037037e-02; A(6,2) = 0.0000000000000000000000e-00;
A(6,3) = 0.0000000000000000000000e-00; A(6,4) = 1.7082860872947387127960e-01;
A(6,5) = 1.2546768756682242501669e-01; A(7,1) = 3.7109375000000000000000e-02;
A(7,2) = 0.0000000000000000000000e-00; A(7,3) = 0.0000000000000000000000e-00;
A(7,4) = 1.7025221101954403931498e-01; A(7,5) = 6.0216538980455960685022e-02;
A(7,6) = -1.7578125000000000000000e-02; A(8,1) = 3.7092000118504792710878e-02;
A(8,2) = 0.0000000000000000000000e-00; A(8,3) = 0.0000000000000000000000e-00;
A(8,4) = 1.7038392571223999381021e-01; A(8,5) = 1.0726203044637328465181e-01;
A(8,6) = -1.5319437748624401752794e-02; A(8,7) = 8.2737891638140228875847e-03;
A(9,1) = 6.2411095871607571711443e-01; A(9,2) = 0.0000000000000000000000e-00;
A(9,3) = 0.0000000000000000000000e-00; A(9,4) = -3.3608926294469412940686e-00;
A(9,5) = -8.6821934684172600681819e-01; A(9,6) = 2.7592099699446708304942e+01;
A(9,7) = 2.0154067550477893408619e+01; A(9,8) = -4.3489884181069958847737e+01;
A(10,1) = 4.7766253643826436589044e-01; A(10,2) = 0.0000000000000000000000e-00;
A(10,3) = 0.0000000000000000000000e-00; A(10,4) = -2.4881146199716676419264e-00;
A(10,5) = -5.9029082683684299637145e-01; A(10,6) = 2.1230051448181194234729e+01;
A(10,7) = 1.5279233632882423583260e+01; A(10,8) = -3.3288210968984862919445e+01;
A(10,9) = -2.0331201708508626135822e-02; A(11,1) = -9.3714243008598732571704e-01;
A(11,2) = 0.0000000000000000000000e-00; A(11,3) = 0.0000000000000000000000e-00;
A(11,4) = 5.1863724288440637083002e-00; A(11,5) = 1.0914373489967295781850e-00;
A(11,6) = -8.1497870107469261251400e-00; A(11,7) = -1.8520065659996959864157e+01;
A(11,8) = 2.2739487099350504281897e+01; A(11,9) = 2.4936055526796523898709e-00;
A(11,10) = -3.0467644718982195003824e-00; A(12,1) = 2.2733101475165382079236e-00;
A(12,2) = 0.0000000000000000000000e-00; A(12,3) = 0.0000000000000000000000e-00;
A(12,4) = -1.0534495466737250198407e+01; A(12,5) = -2.0008720582248624990968e-00;
A(12,6) = -1.7958931863118798917277e+01; A(12,7) = 2.7948884529419960050850e+01;
A(12,8) = -2.8589982771350236947407e-00; A(12,9) = -8.8728569335306295443355e-00;
A(12,10) = 1.2360567175794303064727e+01; A(12,11) = 6.4339274601576353035597e-01;
b8(1) = 5.4293734116568762238054e-02; b8(2) = 0.0000000000000000000000e-00;
b8(3) = 0.0000000000000000000000e-00; b8(4) = 0.0000000000000000000000e-00;
b8(5) = 0.0000000000000000000000e-00; b8(6) = 4.4503128927524088814411e-00;
b8(7) = 1.8915178993145003830428e-00; b8(8) = -5.8012039600105847814672e-00;
b8(9) = 3.1116436695781989440892e-01; b8(10) = -1.5216094966251607855618e-01;
b8(11) = 2.0136540080403034837478e-01; b8(12) = 4.4710615727772590517689e-02;
b5(1) = 4.1173689122373881505552e-02; b5(2) = 0.0000000000000000000000e-00;
b5(3) = 0.0000000000000000000000e-00; b5(4) = 0.0000000000000000000000e-00;
b5(5) = 0.0000000000000000000000e-00; b5(6) = 5.6754693391286133221617e-00;
b5(7) = 2.3872768489717505745642e-00; b5(8) = -7.4655811424655713184287e-00;
b5(9) = 6.6149321570779357609756e-01; b5(10) = -4.8634006837553355758591e-01;
b5(11) = 1.1944219431891463590907e-01; b5(12) = 6.7065923591658885776533e-02;
b3(1) = 2.4409448818897637795276e-01; b3(2) = 0.0000000000000000000000e-00;
b3(3) = 0.0000000000000000000000e-00; b3(4) = 0.0000000000000000000000e-00;
b3(5) = 0.0000000000000000000000e-00; b3(6) = 0.0000000000000000000000e-00;
b3(7) = 0.0000000000000000000000e-00; b3(8) = 0.0000000000000000000000e-00;
b3(9) = 7.3384668828161185734136e-01; b3(10) = 0.0000000000000000000000e-00;
b3(11) = 0.0000000000000000000000e-00; b3(12) = 2.2058823529411764705882e-02;
c(1) = 0.00000000000000000000000e-00; c(2) = 0.52600151958767731878559e-01;
c(3) = 0.78900227938151597817838e-01; c(4) = 0.11835034190722739672676e-00;
c(5) = 0.28164965809277260327324e-00; c(6) = 0.33333333333333333333333e-00;
c(7) = 0.25000000000000000000000e-00; c(8) = 0.30769230769230769230769e-00;
c(9) = 0.65128205128205128205128e-00; c(10) = 0.60000000000000000000000e-00;
c(11) = 0.85714285714285714285714e-00; c(12) = 1.00000000000000000000000e-00;
b85 = b8-b5;
b83 = b8-b3;
A = A';

hnew = hinit; % INITIAL TIMESTEP
u = uinit; % INITIAL SOLUTION
t = tinit; % INITIAL TIME
% LOOP TO COMPUTE FINAL SOLUTION
while (t < tfinal)
    tol = atol+rtol*max(abs(u));
    err = 1+tol;
% LOOP TO COMPUTE ACCEPTABLE TIMESTEP
    while (err > tol)
        h = hnew;
        % ADJUST TIMESTEP IF FINAL TIME EXCEEDED
        if (t+h > tfinal)
            h = tfinal-t;
        end
        % TERMINATE IF TIMESTEP TOO SMALL

        if (h < 1e-15)
        error('h=%e rejected at t=%e',h,t);
        end
        % COMPUTE INTERMEDIATE SOLUTIONS
        K = zeros(length(u),12);
        for j=1:12
            K(:,j) = h*fun(t+c(j)*h,u+K(:,1:j-1)*A(1:j-1,j));
        end
        %ESTIMATE ERROR
        err5 = max(abs(K*b85))^2;
        err3 = max(abs(K*b83))^2;
        err = max(err5/realsqrt(err5+0.01*err3),eps);
        % ESTIMATE NEW TIMESTEP
        hnew = h*0.9*(tol/err)^(1/8);
    end % END OF LOOP TO COMPUTE ACCEPTABLE TIMESTEP
    % MARCH FORWARD IN TIME
        t = t+h; % NEW TIME
        u = u+K*b8; % NEW SOLUTION
        u = adapt(t,u); % SOLUTION AFTER SPATIAL ADAPTIVITY (REMOVE IF NOT REQUIRED)
end % END OF LOOP TO COMPUTE FINAL SOLUTION    