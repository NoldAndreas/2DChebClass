function ThreePhaseContactLine_FMT_HalfSpaceSkewed()
%************************************************************************* 
% data = DDFT_DiffusionBox_2Phase_Sat(optsPhys,optsNum)
%
% Set mu_s :=  = kBT*log(rho) + int(rho(r')*Phi2D(r-r'),dr') +...
%               + mu_HS(rho_s) + V_ext - mu_sat
%
% Equilibrium:
% (EQ 1) mu_s = 0  
% Dynamics: 
% (DYN 1) drho/dt = div(rho*grad(mu_s))
% (BC )    0      = n*grad(mu_s) 
% where n is the normal to the wall.
%*************************************************************************            
    
    disp('** ThreePhaseContactLine FMT HalfSpaceSkewed **');    
    AddPaths();
    global PersonalUserOutput
    %************************************************
    %***************  Initialization ****************
    %************************************************
    %Numerical Parameters    
    N1        = 40;
    N2        = 40;
    theta_CS_deg = 67;%53.;
    theta_CS  = theta_CS_deg*pi/180; %pi/3;
   % theta_CS = pi/2;
    
	PhysArea = struct('N',[N1,N2],'L1',2,'L2',2,'y2wall',0.,...
                       'N2bound',24,'h',1,'L2_AD',2.,'alpha',theta_CS);
                   
    PhysArea.Conv  = struct('L',[],'L2',1.,'N',[50,50]);                   
    
    Plot_Area = struct('y1Min',-8,'y1Max',8,'N1',80,'N2',80,...
                       'y2Min',0.5/sin(theta_CS),'y2Max',10/sin(theta_CS));
    
    Fex_Num   = struct('Fex','FMTRosenfeld_3DFluid',...
                       'Ncircle',1,'N1disc',35,'N2disc',34);
        
    optsNum = struct('PhysArea',PhysArea,...
                     'PlotArea',Plot_Area,...                     
                     'FexNum',Fex_Num,...
                     'maxComp_y2',10,...
                     'DDFTCode','DDFT_HalfSpace_FMT_2Phase_Sat');
                      
    V1 = struct('V1DV1','Vext_Cart_7','epsilon_w',0.6);%0.4);
    V2 = struct('V2DV2','Phi2DLongRange','epsilon',1); 
                     
    optsPhys = struct('V1',V1,'V2',V2,...                      
                      'kBT',0.6,...   
                      'Dmu',0.0,'nSpecies',1,...
                      'sigmaS',1);        
    %************************************************
    %***************  Initialization ****************
    %************************************************
    close all;
        
    PhysArea     = optsNum.PhysArea;           
    kBT          = optsPhys.kBT;    
    R            = optsPhys.sigmaS/2;
    
	optsPhys.HSBulk = (['FexBulk_',optsNum.FexNum.Fex]);      
	getFex          = str2func(['Fex_',optsNum.FexNum.Fex]);
    nSpecies        = 1;
            
    Phi_r          = str2func(optsPhys.V2.V2DV2);
    Dmu            = optsPhys.Dmu;
    
	saveFigs = false;
       
    %************************************************
    %****************  Preprocess  ****************
    %************************************************       
    tic            
    %(1) Thermodynamic Values
    [rhoGas_sat,rhoLiq_sat,mu_sat] = BulkSatValues(optsPhys,[0.01;0.6;-2]);
    GetCriticalPoint(optsPhys);

    optsPhys.mu_sat      = mu_sat;
    optsPhys.rhoGas_sat  = rhoGas_sat;
    optsPhys.rhoLiq_sat  = rhoLiq_sat;
    
    %(2) Numerical Integration, Differentiation
    HS                 = HalfSpaceSkewed_FMT(PhysArea,diag(optsPhys.sigmaS)/2);
    [Pts,Diff,Int,Ind] = HS.ComputeAll(optsNum.PlotArea);
    
    
    %(3) Numerical Convolution
	opts.V2                 = optsPhys.V2;    
    opts.nSpecies           = optsPhys.nSpecies;    
	opts.optsNum.PhysArea   = optsNum.PhysArea;    
    [convStruct,recomputed] = DataStorage(['HalfSpace_FMT' filesep 'FexMatrices_Meanfield'],@FexMatrices_Meanfield,opts,HS);   
    Conv                    = convStruct.Conv;
    
    if(recomputed && (PersonalUserOutput))
        yPtsCheck          = [0 2 ; 0 PhysArea.y2wall ; -10 0 ; 20 10];
        HS.TestConvolutionMatrix(yPtsCheck,@Phi);        
    end
    
    %(4) FMT Matrices
    tic
    fprintf(1,'Computing Fex matrices ...\n');   
        
    params.sigmaS  = optsPhys.sigmaS;
    params.FexNum  = optsNum.FexNum;
    params.PhysArea = optsNum.PhysArea;
    
    params.Pts     = HS.Pts;     
    params.Polar   = 'cart';      
    func           = str2func(['FexMatrices_',optsNum.FexNum.Fex]);                
    [IntMatrFex,recFex] = DataStorage(['HalfSpace_FMT' filesep func2str(func)],func,params,HS); %true 
     if(recFex)
        CheckAverageDensities_Rosenfeld_3D(HS,IntMatrFex);
     end
     
     %(5) External Potential       
    PtsCart  = HS.GetCartPts();
    Vext     = getVBackDVBack(PtsCart.y1_kv,PtsCart.y2_kv,optsPhys.V1);      
    VAdd     = getVAdd(PtsCart.y1_kv,PtsCart.y2_kv,0,optsPhys.V1);
    t_preprocess = toc;
    
	%****************************************************************
    %**************** Solve for equilibrium 1D condition   **********
    %****************************************************************        
    
    %***** Compute Surface tension *****    
	[rho1D_lg,rho1D_wg,rho1D_wl] = ComputeST();                                
    close all;    
    
    %****************************************************************
    %**************** Solve for equilibrium condition   ************
    %****************************************************************    
    tic    
    fprintf('Solving for equilibrium condition...');    
     
%    rho_ig = rhoGas_sat*ones(size(Pts.y1_kv));
    %rho_ig = kron(rho1D_lg,ones(N2,1));
    %rho_ig = kron(ones(N1,1),rho1D_wg);
    %rho_ig = kron(ones(N1,1),rho1D_wl);
    p      = (rho1D_lg-rhoGas_sat)/(rhoLiq_sat-rhoGas_sat);
    
    rho_ig = kron(p,rho1D_wl) + kron(1-p,rho1D_wg); 
    
    if(PersonalUserOutput)
        figure('Name','Initial Guess');
        HS.doPlots(rho_ig,'SC');
    end
        
    x_ig             = kBT*log(rho_ig)+Vext;
    
    opts             = PhysArea;
    opts.optsPhys    = optsPhys;
    %opts.ig          = x_ig;
    mark = (PtsCart.y2_kv < optsNum.maxComp_y2);
    opts.mark        = mark;
        
    x_ic        = DataStorage('EquilibriumSolutions',@ComputeEquilibriumCondition,opts,x_ig); %true   
    x_ic(mark)  = x_ic;
    x_ic(~mark) = x_ig(~mark);
    rho_ic      = exp((x_ic-Vext)/kBT);
    
    if(PersonalUserOutput)
        figure('Color','white'); 
        HS.doPlots(rho_ic,'SC');

        figure('Color','white');
        optDetails.nContours = 10;
        optDetails.clabel = true;
        HS.doPlots(rho_ic,'contour',optDetails);
    end

    
    t_eqSol   = toc;
    fprintf([num2str(t_eqSol),'s']);
    
    %************************************************
    %****************  Postprocess  ****************
    %************************************************            
    %SaveToFile(optsNum.DDFTCode,v2struct(data,optsPhys,optsNum),getResultsPath());
    
    display(['Preprocessor, Computation time (sec): ', num2str(t_preprocess)]);
    display(['Equilibrium, Computation time (sec): ', num2str(t_eqSol)]);
        
    %***************************************************************
    %   Physical Auxiliary functions:
    %***************************************************************  
    function [rho1D_lg,rho1D_wg,rho1D_wl] = ComputeST()%dmu,epw)        
        optss            = optsPhys;
        optss.rho_iguess = rhoGas_sat;
        optss.Dmu        = optsPhys.Dmu;
        
        [rho1D_lg,parms] = FMT_1D_Interface(HS,IntMatrFex,optsPhys,Fex_Num,Conv,true,-0.5);
        om_LiqGas        = parms.Fex;
              
        [rho1D_wg,parms]        = FMT_1D(HS,IntMatrFex,optss,Fex_Num,Conv,true);
        om_wallGas       = parms.Fex;
        
        optss.rho_iguess = rhoLiq_sat;
        [rho1D_wl,parms]        = FMT_1D(HS,IntMatrFex,optss,Fex_Num,Conv,true);
        om_wallLiq       = parms.Fex;
        
        fprintf(['Omega(Liq/Gas) = ',num2str(om_LiqGas),'\n']);
        fprintf(['Omega(wall/Liq) = ',num2str(om_wallLiq),'\n']);
        fprintf(['Omega(wall/Gas) = ',num2str(om_wallGas),'\n']);
        
        theta = ComputeContactAngle(om_wallGas,om_wallLiq,om_LiqGas);        
    end
    
    function x_ic = ComputeEquilibriumCondition(params,x_ig)        
       % options = optimset('MaxFunEvals',300000);
        x_ic    = fsolve(@GetExcessChemPotential,x_ig(mark));%,options);
    end


    function mu_s = GetExcessChemPotential(xm)
        
        x(mark)  = xm;
        x(~mark) = x_ig(~mark);
        x        = x';
                
        rho_s    = exp((x-Vext)/kBT);
        mu_s     = getFex(rho_s,IntMatrFex,kBT,R);
                       
        for iSpecies=1:nSpecies
           mu_s(:,iSpecies) = mu_s(:,iSpecies) - (mu_sat + Dmu);
        end
        mu_s = mu_s + x + Conv*rho_s + VAdd;   
        mu_s = mu_s(mark);
    end   

    function z = Phi(r)
         z = Phi_r(r,optsPhys.V2);
    end       

end