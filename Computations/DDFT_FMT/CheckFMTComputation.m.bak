function data = CheckFMTComputation(optsPhys,optsNum,optsPlot)
%************************************************************************* 
% define
%   mu_s_i := kBT*log(rho_i) + sum( int(rho_j(r')*Phi2D(r-r'),dr') , 
%               j = 1..N) +mu_HS(rho_i) + V_ext_i - mu_i
% Equilibrium, (solve for each species i)
%  (EQ i,1) mu_s_i     = 0
%  (EQ i,2) int(rho_i) = NoParticles_i
% Dynamics:
%*************************************************************************   
    if(nargin == 0)
        [optsNum,optsPhys,optsPlot] = TestFMT_DDFT_DiffusionHalfSpace_HardWall();
    end

    close all;
    disp(['** ',optsNum.DDFTCode,' **']);

    %************************************************
    %***************  Initialization ****************
    %************************************************
    kBT       = optsPhys.kBT;       
    eta       = optsPhys.eta;
            
    PhysArea  = optsNum.PhysArea;       
    plotTimes = 0:(optsNum.Tmax/optsNum.TN):optsNum.Tmax;
    Rs        = diag(optsPhys.V2.sigmaS)/2;
    R         = Rs(1);
    fBulk     = str2func(['FexBulk_',optsNum.FexNum.Fex]);
    nSpecies  = length(Rs);
    
    N1        = PhysArea.N(1);   N2 = PhysArea.N(2);
        
    getFex = str2func(['Fex_',optsNum.FexNum.Fex]);
    
    HS                        = HalfSpace_FMT(PhysArea,Rs);
    [Pts,Diff,Int,Ind]        = HS.ComputeAll(optsNum.PlotArea);
    Interp1D                  = HS.ComputeInterpolationMatrix(1,(-1:0.01:0.7)',true);
    
    %HS.AD.PlotGrid();
         
    subPts.y2_kv              = (0.:0.01:3.5)';
    subPts.y1_kv              = inf*ones(size(subPts.y2_kv));           
    IP                        = HS.AD.SubShapePts(subPts);
    Interp1D_AD.InterPol      = IP(:,HS.AD.Pts.y1_kv == inf);
    Interp1D_AD.pts1          = subPts.y1_kv; 
    Interp1D_AD.pts2          = subPts.y2_kv;
    
	subPtsAAD.y2_kv           = (0.5:0.01:3.5)';
    subPtsAAD.y1_kv           = inf*ones(size(subPtsAAD.y2_kv));           
    IP                        = HS.SubShapePts(subPtsAAD);
    Interp1D_AAD.InterPol     = IP(:,HS.Pts.y1_kv == inf);
    Interp1D_AAD.pts1         = subPtsAAD.y1_kv; 
    Interp1D_AAD.pts2         = subPtsAAD.y2_kv;
    
    mu = fBulk(eta*6/pi,kBT);
    
    %************************************************
    %****************  Preprocess  ******************
    %************************************************
    
    tic
    fprintf(1,'Computing Fex matrices ...\\');   
    
    params         = optsPhys;
    params         = rmfield(params,'V1');
    params.FexNum  = optsNum.FexNum;
    params.PhysArea = optsNum.PhysArea;
    
    params.Pts     = HS.Pts;     
    params.Polar   = 'cart';      
    func           = str2func(['FexMatrices_',optsNum.FexNum.Fex]);            
    params         = rmfield(params,'eta');
    
    IntMatrFex_2D  = DataStorage('FexData',func,params,HS); %true 
    close all;
    IntMatrFex_1D  = Get1DMatrices(IntMatrFex_2D,HS);
    
    IntMatrFex     = IntMatrFex_1D;
    
    fprintf(1,'done.\n');
    tfex = toc;
    disp(tfex);        
    
    y1S     = repmat(Pts.y1_kv,1,nSpecies); 
    y2S     = repmat(Pts.y2_kv,1,nSpecies);    

    I       = eye(N1*N2);
    eyes    = repmat(I,1,2);
    
    t_preprocess = toc;
    
%     
  
    %****************************************************************
    %**************** Solve for equilibrium 1D condition   **********
    %****************************************************************        
    tic
    
    markComp  = (Pts.y1_kv==inf);    
    y0        = zeros(N1*N2,nSpecies);%getInitialGuess(VAdd0);        
    y0        = y0(markComp);
    
    CheckAverageDensities();
   
    %PlotRosenfeldFMT_AverageDensities(HS,IntMatrFex(1),ones(size(y0)));                   
    fprintf(1,'Computing initial condition ...');
    fsolveOpts=optimset('MaxFunEvals',2000000,'MaxIter',200000);    
    x_ic_1D        = fsolve(@f,y0,fsolveOpts);     
    rho_ic1D       = exp(x_ic_1D/kBT);
    
    x_ic           = repmat(x_ic_1D,N1,1);
    rho_ic         = repmat(rho_ic1D,N1,1);
      
    f1 = figure;
    set(gcf,'Color','white');
    set(f1, 'Position', [0 0 1000 1000]);	
    if(eta == 0.4783)
        shift = struct('xmin',0.235,'xmax',3.31,'ymin',-1.75,'ymax',12.25,'yref',0,'xref',0.5);
        PlotBackgroundImage(['Fex' filesep 'FMT' filesep 'SpecialPlotting' filesep 'PackingFraction0_4783_RothFMTReview.gif'],shift);
        yl = [0 12];
        strEta = '0_4783';
    elseif(eta == 0.4257)
        shift = struct('xmin',0.5,'xmax',3.,'ymin',0.,'ymax',7.,'yref',0,'xref',0.5);
        PlotBackgroundImage(['Fex' filesep 'FMT' filesep 'SpecialPlotting' filesep 'PackingFraction0_4257_RothFMTReview.gif'],shift);
        yl = [0 7];
        strEta = '0_4257';
    end
	%plot(Pts.y2_kv(markComp),rho_ic1D,'o','markersize',1.5); hold on
	%plot(Interp1D.pts2,Interp1D.InterPol*rho_ic,'linewidth',1.5);
	%xlim([0.5 3.5]);                
    
    plot(Pts.y2_kv(markComp),rho_ic1D,'o','markersize',8,'markerFace','green'); hold on
    plot(Interp1D.pts2,Interp1D.InterPol*rho_ic,'linewidth',1.5);
    xlim([0.5 3.]);   ylim(yl);
    h = xlabel('$y$');  set(h,'Interpreter','Latex'); set(h,'fontsize',25);
	h = ylabel('$\rho$');  set(h,'Interpreter','Latex'); set(h,'fontsize',25);
	pbaspect([1 1 1]);                
	set(gca,'fontsize',20);                        
    set(gca,'linewidth',1.5);        
    ax=get(f1,'Position');    
    hold off;
   % print2eps(['Density_eta',strEta],gcf);
   % save2pdf(['Density_eta_',num2str(eta),'.pdf'],gcf);
        
	f2 = figure;
    set(gcf,'Color','white');
    if(eta == 0.4783)
        shift = struct('xmin',0.5,'xmax',.6,'ymin',0.,'ymax',11.,'yref',0,'xref',0.5);
        PlotBackgroundImage(['Fex' filesep 'FMT' filesep 'SpecialPlotting' filesep 'Inset_PackingFraction0_4783_RothFMTReview.gif'],shift);
        xlim([0.5 .6]);   ylim([0 12]);             
	elseif(eta == 0.4257)
        shift = struct('xmin',1.3,'xmax',1.8,'ymin',0.65,'ymax',1.55,'yref',0.65,'xref',1.3);
        PlotBackgroundImage(['Fex' filesep 'FMT' filesep 'SpecialPlotting' filesep 'Inset_PackingFraction0_4257_RothFMTReview.gif'],shift);
        xlim([1.3 1.8]);   ylim([0.65 1.55]);             
    end
        
	plot(Pts.y2_kv(markComp),rho_ic1D,'o','markersize',8,'markerFace','green'); hold on
    plot(Interp1D.pts2,Interp1D.InterPol*rho_ic,'linewidth',1.5);  
    h = xlabel('$y$');  set(h,'Interpreter','Latex'); set(h,'fontsize',15);
	h = ylabel('$\rho$');  set(h,'Interpreter','Latex'); set(h,'fontsize',15);
	pbaspect([1 1 1]);                
	set(gca,'fontsize',15);                        
    set(gca,'linewidth',1.5);            
    hold off;
    
    %save2pdf(['Inset_Density_eta_',num2str(eta),'.pdf'],gcf);   
    
    inset(f1,f2,0.35,[.5 .6]);   colormap(gray);    
    set(gcf,'Color','white'); close(f1); close(f2);
    set(gcf, 'Position', [0 0 800 800]);	
    print2eps(['Density_eta_',strEta],gcf);
    %saveas(gcf,['Density_eta_',strEta,'.eps'],'eps');
    saveas(gcf,['Density_eta_',strEta,'.fig']);   
     
    PlotRosenfeldFMT_AverageDensitiesInf(IntMatrFex(1),rho_ic1D);
    %save2pdf(['AverageDensities_eta_',num2str(eta),'.pdf'],gcf);
    print2eps(['AverageDensities_eta_',strEta],gcf);
%    saveas(gcf,['AverageDensities_eta_',strEta,'.eps'],'eps');
    saveas(gcf,['AverageDensities_eta_',strEta,'.fig']);
    %***************************************************************
    %   Physical Auxiliary functions:
    %***************************************************************                      
    function y = f(x)
        %solves for T*log*rho + Vext                        
        y            = GetExcessChemPotential(x,0,mu);         
        y            = y(:);
    end

    function mu_s = GetExcessChemPotential(x,t,mu_offset)
        rho_s = exp(x/kBT);                
        mu_s  = getFex(rho_s,IntMatrFex,kBT);
                       
        for iSpecies=1:nSpecies
           mu_s(:,iSpecies) = mu_s(:,iSpecies) - mu_offset(iSpecies);
        end
        Vadd = getVAdd(y1S,y2S,t,optsPhys.V1);
        mu_s = mu_s + x;  %HS_f(rho_s,kBT)
    end

    function dxdt = dx_dt(t,x)
       % x       = reshape(x,N1*N2,nSpecies);
        
        mu_s     = GetExcessChemPotential(x,t,mu);
        mu_s((Pts.y1_kv==inf) | (Pts.y1_kv==-inf) | (Pts.y2_kv==inf),:) = 0;
        h_s      = Diff.grad*x;
        h_s([Pts.y2_kv==inf;Pts.y2_kv==inf],:)  = 0; %here, we have assumed that grad(mu) converges fast enough
        h_s([Pts.y1_kv==inf;false(N1*N2,1)],:)  = 0; %here, we have assumed that grad(mu) converges fast enough
        h_s([Pts.y1_kv==-inf;false(N1*N2,1)],:) = 0; %here, we have assumed that grad(mu) converges fast enough
                
        dxdt     = kBT*Diff.Lap*mu_s + eyes*(h_s.*(Diff.grad*mu_s));  
                
        %Boundary Conditions at infinity
        dxdt(Ind.bound,:)  = x(Ind.bound,:) - x_ic(Ind.bound,:);   
        
        flux_dir           = Diff.grad*mu_s;                
        dxdt(Ind.bottom,:) = Ind.normalBottom*flux_dir;             
               
        dxdt = dxdt(:);      
    end

    %***************************************************************
    %Auxiliary functions:
    %***************************************************************

    function PlotRosenfeldFMT_AverageDensitiesInf(FMTMatrices,rho)
        
        f1 = figure('name','Average densities');
        set(gcf,'Color','white');
        set(f1, 'Position', [0 0 1300 400]);
        
        nStruct = FMTMatrices.AD;            
        
        subplot(1,3,1);            
        do1Dplot(nStruct.n2*rho); 
        hh = title('$n_2$'); set(hh,'Interpreter','Latex'); set(hh,'fontsize',25);
        pbaspect([1 1 1]);

        subplot(1,3,2);
        do1Dplot(nStruct.n3*rho);  
        hh = title('$n_3$'); set(hh,'Interpreter','Latex'); set(hh,'fontsize',25);
        pbaspect([1 1 1]);

        subplot(1,3,3);
        do1Dplot(nStruct.n2_v_2*rho);  
        hh = title('${\bf n}_{2,y}$'); set(hh,'Interpreter','Latex'); set(hh,'fontsize',25);  
        pbaspect([1 1 1]);

    end

    function do1Dplot(val)
            plot(HS.AD.Pts.y2_kv(HS.AD.Pts.y1_kv == inf),val,'o','MarkerEdgeColor','k','MarkerFaceColor','g'); hold on
            plot(Interp1D_AD.pts2,Interp1D_AD.InterPol*val,'linewidth',1.5);
            xlim([min(Interp1D_AD.pts2) max(Interp1D_AD.pts2)]);    
            h = xlabel('$y$');     set(h,'Interpreter','Latex'); set(h,'fontsize',25);
        	%h = ylabel('$\rho$');  set(h,'Interpreter','Latex'); set(h,'fontsize',25);                        
            %title(sel(i));    
            set(gca,'fontsize',20);                        
            set(gca,'linewidth',1.5);                        
    end

    function PlotRosenfeldFMT_AADInf(FMTShape,FMTMatrices,rho,sel)
        
        figure('name','AAD');
        nStruct = FMTMatrices.AAD;
        fields  = fieldnames(nStruct);                
        
        if(nargin < 4)
            sel = fields;
        end

        noRows  = ceil(sqrt(numel(sel)));
        noCols  = ceil(numel(sel)/noRows);
           
        for i=1:numel(sel)
          
            subplot(noRows,noCols,i);
            
            val = nStruct.(sel{i})*rho;
            
            plot(FMTShape.Pts.y2_kv(FMTShape.Pts.y1_kv == inf),val,'o'); hold on
            plot(Interp1D_AAD.pts2,Interp1D_AAD.InterPol*val);
            xlim([min(Interp1D_AAD.pts2) max(Interp1D_AAD.pts2)]);    
                        
            title(sel(i));    
        end
    end
    
    function flux = GetFlux(x,t)
        rho_s = exp((x-Vext)/kBT);       
        mu_s  = GetExcessChemPotential(x,t,mu); 
        flux  = -[rho_s;rho_s].*(Diff.grad*mu_s);                                
    end

    function CheckAverageDensities()            
        x = 0:0.01:5;
        PlotRosenfeldFMT_AverageDensitiesInf(IntMatrFex(1),ones(size(y0))); 
        subplot(1,3,1); hold on; plot(x,check1n2(x),'m');
        subplot(1,3,2); hold on; plot(x,check1n3(x),'m');
        subplot(1,3,3); hold on; plot(x,check1n2z(x),'m');      
        
        %********************************
        x = HS.Pts.y2_kv(HS.Pts.y1_kv == inf);    
        PlotRosenfeldFMT_AverageDensitiesInf(IntMatrFex(1),2-erf(x));
        
        xC = 0:0.01:5;
        %n2:
        subplot(1,3,1); plot(xC,f2_h2(xC+R) - f2_h2(max(R,xC-R)),'m');        
        
        %n3:
        subplot(1,3,2); plot(xC,f3_h2(xC,xC+R) - f3_h2(xC,max(R,xC-R)),'m');                        
        
        %n2z
        subplot(1,3,3); plot(xC,f2z_h2(xC,xC+R) - f2z_h2(xC,max(R,xC-R)),'m');
        
        %********************************
        z = HS.AD.Pts.y2_kv(HS.AD.Pts.y1_kv == inf);    
        rhoAD = erf(z);
        PlotRosenfeldFMT_AADInf(HS,IntMatrFex(1),rhoAD,{'n3','n2','n2_v_1','n2_v_2'});
        %subplot(2,2,2); plot(y2,pi*R*log( (1-tanh(R-y2))./(1+tanh(R+y2)).*(1+tanh(R-y2))./(1-tanh(R+y2))  ),'m');        
        
        subplot(2,2,1); plot(z,(1/6)*sqrt(pi)*(-2*sqrt(pi)*erf(z+R).*z.^3.*exp(z.^2+2*R*z+R^2)+6*sqrt(pi)*erf(z+R).*z*R^2.*exp(z.^2+2*R*z+R^2)+4*sqrt(pi)*erf(z+R)*R^3.*exp(z.^2+2*R*z+R^2)-2*z.^2+2*R*z+4*R^2-2-3*sqrt(pi)*erf(z+R).*z.*exp(z.^2+2*R*z+R^2)-2*exp(z.^2+2*R*z+R^2).*erf(-z+R).*z.^3*sqrt(pi)+6*exp(z.^2+2*R*z+R^2).*erf(-z+R).*z*R^2*sqrt(pi)-4*exp(z.^2+2*R*z+R^2).*erf(-z+R)*R^3*sqrt(pi)+2*exp(4*R*z).*z.^2+2*exp(4*R*z)*R.*z-4*exp(4*R*z)*R^2+2*exp(4*R*z)-3*exp(z.^2+2*R*z+R^2).*z.*erf(-z+R)*sqrt(pi)).*exp(-z.^2-2*R*z-R^2),'m');
        
        subplot(2,2,2); plot(z,-2*sqrt(pi)*R*(-z*sqrt(pi).*erf(z+R)-sqrt(pi)*erf(z+R)*R-exp(-(z+R).^2)-sqrt(pi)*z.*erf(-z+R)+sqrt(pi)*erf(-z+R)*R+exp(-(-z+R).^2)),'m');
        %subplot(2,2,4); plot(z,(1/2)*sqrt(pi)*R*(2*erf(z+R)*sqrt(pi).*exp(2*z.^2+2*R^2).*z.^2+4*erf(z+R)*sqrt(pi).*exp(2*z.^2+2*R^2).*z*R+2*erf(z+R)*sqrt(pi).*exp(2*z.^2+2*R^2)*R^2+2*exp((-z+R).^2).*z+2*exp((-z+R).^2)*R-erf(z+R)*sqrt(pi).*exp(2*z.^2+2*R^2)+2*erf(-z+R)*sqrt(pi).*exp(2*z.^2+2*R^2).*z.^2-4*erf(-z+R)*sqrt(pi).*exp(2*z.^2+2*R^2).*z*R+2*erf(-z+R)*sqrt(pi).*exp(2*z.^2+2*R^2)*R^2-2*exp((z+R).^2).*z+2*exp((z+R).^2)*R-erf(-z+R)*sqrt(pi).*exp(2*z.^2+2*R^2)).*exp(-2*z.^2-2*R^2),'m');        
        
        
        subplot(2,2,4); plot(z,-(1/2)*sqrt(pi)*(-2*erf(z+R)*sqrt(pi).*exp(2*z.^2+2*R^2).*z.^2+2*erf(z+R)*sqrt(pi).*exp(2*z.^2+2*R^2)*R^2-2*exp((-z+R).^2).*z+2*exp((-z+R).^2)*R-erf(z+R)*sqrt(pi).*exp(2*z.^2+2*R^2)-2*erf(-z+R)*sqrt(pi).*exp(2*z.^2+2*R^2).*z.^2+2*erf(-z+R)*sqrt(pi).*exp(2*z.^2+2*R^2)*R^2+2*exp((z+R).^2).*z+2*exp((z+R).^2)*R-erf(-z+R)*sqrt(pi).*exp(2*z.^2+2*R^2)).*exp(-2*z.^2-2*R^2),'m');
                
    end 

    function y = f3_h2(x,xt)
        y = pi*((xt.^3.*erf(xt))/3 + xt.*(2*R^2 - 2*x.^2) + 2*x.*xt.^2 + (x.*erf(xt))/2 - (2*xt.^3)/3 + (xt.^2.*exp(-xt.^2))/(3*pi^(1/2)) - x.*xt.^2.*erf(xt) + (exp(-xt.^2).*(- R^2 + x.^2 + 1/3))/pi^(1/2) - xt.*erf(xt).*(R^2 - x.^2) - (x.*xt.*exp(-xt.^2))/pi^(1/2));
    end
 

    function y = f2_h2(xt)
        y = pi*(2*xt - exp(-xt.^2)/pi^(1/2) - xt.*erf(xt));
    end
    function y = f2z_h2(x,xt)
        y = pi^(1/2)*xt.*exp(-xt.^2) - (pi*erf(xt))/2 - 2*pi^(1/2)*x.*exp(-xt.^2) - 2*pi*xt.^2 + pi*xt.^2.*erf(xt) + 4*pi*x.*xt - 2*pi*x.*xt.*erf(xt);
    end

    function y  = check1n2(x)
        y        = ones(size(x));
        y(x < 1) = x(x<2*R);
        y = y*2*pi*R;
    end
    function y  = check1n3(x)
        y        = 4*(R^3)*ones(size(x));
        y(x < 1) = (x(x<1)).^2.*(3*R-x(x<1));
        y        = y*pi/3;
    end
    function y  = check1n2z(x)
        y        = zeros(size(x));
        y(x < 1) = pi*(x(x<1)).*(x(x<1)-2*R);        
    end


end