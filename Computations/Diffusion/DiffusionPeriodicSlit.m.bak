function DiffusionPeriodicSlit()

    disp('** DiffusionPeriodicSlit **');
    
	if(length(dbstack) == 1)
        AddPaths();
    end    
    close all;
    
    %************************************************
    %****************  Preprocess  ****************
    %************************************************
    L = 2;	
    Maps = struct('PhysSpace1',@Comp_to_Phys1,...
                  'PhysSpace2',@Comp_to_Phys2,...
                  'CompSpace1',@Phys_to_Comp1,...
                  'CompSpace2',@Phys_to_Comp2);
              
    y1Plot = Maps.PhysSpace1((-1:0.02:1)');
    y2Plot = Maps.PhysSpace2((0:0.02:1)');
              
    [Pts,Diff,Int,Ind,Interp] = SpectralFourier(Maps,30,30,y1Plot,y2Plot);              
              
    rho_ic = AnalyticalSolution(Pts.y1_kv,Pts.y2_kv,0);
         
    n1     = length(Pts.x1);
    n2     = length(Pts.x2);
 
    doPlots_IP(Interp,dofft(rho_ic,n1,n2));

    %****************************************************************
    %****************  Compute time-dependent solution   ************
    %****************************************************************        
    mM  = ones(n1*n2,1);
    mM(Ind.left) = 0;
    mM(Ind.right) = 0;
    %opts = odeset('OutputFcn',@PlotFcn,'RelTol',10^-8,'AbsTol',10^-8,'Mass',diag(mM));
    opts = odeset('RelTol',10^-8,'AbsTol',10^-8,'Mass',diag(mM));
    [outTimes,Rho_t] = ode15s(@Lap,[0:0.05:2],rho_ic,opts);
    
    y1M     = reshape(Interp.pts1,Interp.Nplot2,Interp.Nplot1);
    y2M     = reshape(Interp.pts2,Interp.Nplot2,Interp.Nplot1);

    for i=1:length(outTimes)
        rho = Rho_t(i,:)';
           
        z = real(Interp.InterPol*dofft(rho,n1,n2));
        
        subplot(2,1,1)
        mesh(y1M,y2M,reshape(z,Interp.Nplot2,Interp.Nplot1));        
        title(['Interpolation of Solution at t = ', num2str(outTimes(i))]);       
        zlim([0 max(rho_ic)]);
        
        subplot(2,1,2)
        h = max( rho -  AnalyticalSolution(Pts.y1_kv,Pts.y2_kv,outTimes(i)));
        hI = max( z -  AnalyticalSolution(Interp.pts1,Interp.pts2,outTimes(i)));
        hold on;
        plot(outTimes(i),h,'o');
        hold on;        
        plot(outTimes(i),hI,'r');
        
        pause(0.05);
        
    end
        
    
    function dydt = Lap(t,rho)
        dydt            = Diff.Lap*rho;
        dydt(Ind.left) = Ind.normalLeft*(Diff.grad*rho);
        dydt(Ind.right) = Ind.normalRight*(Diff.grad*rho);
    end
                   
    function y = AnalyticalSolution(y1,y2,t)
        y = cos(pi*y1/L).*cos(2*pi*y2/L)*exp(-5*t*(pi/L)^2);
    end

    function stat = PlotFcn(t,rho,flag)
        if(~ isscalar(t))
            t = 0;
        end        
        
        stat = 0;
 
        if isempty(flag)
            
            rho_full = rho;
            
            doPlots_IP(Interp,dofft(rho_full,n1,n2));      
            zlim([0 max(rho_ic)]);
            drawnow;
        end
    end

     %***************************************************************
     %***************************************************************
     %Mapping functions:
    function [z,dz,dx,ddx,dddx,ddddx] = Comp_to_Phys1(xR)
        [z,dz,dx,ddx,dddx,ddddx] = LinearMap(xR,0,L);
    end
    function xf = Phys_to_Comp1(z)
         xf  = -1 + 2*z/L;                     
    end 

    function [z,dz,dx,ddx,dddx,ddddx] = Comp_to_Phys2(xR)
        [z,dz,dx,ddx,dddx,ddddx] = LinearMap01(xR,0,L);
    end
    function xf = Phys_to_Comp2(z)
         xf  = z/L;                     
    end 

end